---
- hosts: all #testservers
  vars:
    USER_EMAIL: amsaslink@gmail.com
    USER_NAME: "amsaslink"
    USER_PASSWORD: "zCYrES7LNrZhj4#Y"
    APP_NAME: "AmsaslinkImageManagerServer"
    SETTINGS_MODULE_PATH: "AmsaslinkImageManagerServer.settings"
    SETTINGS_MODULE_DIR: "/home/amsaslink/AmsaslinkImageManagerServer"
    DIRECTORY: "/home/amsaslink/AmsaslinkImageManagerServer"
    VIRTUALENV_DIRECTORY: "/home/amsaslink/AmsaslinkImageManagerServer/env"
    SSH_KEY_DIRECTORY: "/home/amsaslink/.ssh"
    APP_CONTAINER_DIRECTORY: "/home/amsaslink"

  remote_user: root
  become: yes
  roles:
      - ansible-pip

  tasks:
    - name: Update the instance
      sudo: yes
      apt: update-cache=yes

    - name: Install the git
      sudo: yes
      apt:
         name=git
         state=present

    - name: Create the user for this app deployment
      sudo: yes
      user:
        name={{ USER_NAME }}
        password={{ USER_PASSWORD }}
        createhome=yes
        state=present
        update_password=always
        generate_ssh_key=yes

    - name: Permit on ssh folder
      become: yes
      command: "chmod -R 755 {{ SSH_KEY_DIRECTORY }}"

    - name: Transfer the private key
      become: yes
      copy:
        src="key_files/id_rsa"
        dest="{{ SSH_KEY_DIRECTORY }}/id_rsa"
        owner="amsaslink"
        mode=0755

    - name: Transfer the public key
      become: yes
      copy:
        src="key_files/id_rsa.pub"
        dest="{{ SSH_KEY_DIRECTORY }}/id_rsa.pub"
        owner="amsaslink"
        mode=0755

    - name: Config the eamil of the git user
      become: yes
      command: git config --global user.email {{ USER_EMAIL }}

    - name: Config the eamil of the git user
      become: yes
      command: git config --global user.name {{ USER_NAME }}

    - name: Omit the changes by the git for file permission changes
      become: yes
      command: git config --global core.filemode false

    - name: Clone the repository in project Directory
      sudo: yes
      git:
        repo=git@bitbucket.org:amsaslink/amsaslinkimagemanagerserver.git
        dest={{ DIRECTORY }}
        accept_hostkey=yes
        key_file="{{  SSH_KEY_DIRECTORY }}/id_rsa"
        update=yes
        force=yes
        version='master'

    - name: Add the permission for the directory
      become: yes
      command: chmod -R 755 {{ DIRECTORY }}

    - name: Add the permission for the directory
      become: yes
      command: chmod -R 777 "{{ DIRECTORY }}/db"

    - name : Install vitualenv
      become: yes
      shell: pip install virtualenv
      args:
        chdir: "{{ DIRECTORY }}"


    # Installing the libjpeg modules for proper image processing
    # sudo apt-get install libjpeg-dev libfreetype6 libfreetype6-dev zlib1g zlib1g-dev
    - name: install the jpeg lib
      become: yes
      apt:
        name="{{ item }}"
        state=present
      with_items:
        - flex
        - bison
        - binutils-doc
        - autoconf
        - build-essential
        - libxml2-dev
        - libxslt1-dev
        - python-dev
        - libjpeg-dev
        - libfreetype6
        - libfreetype6-dev
        - libpng-dev
        - zlib1g
        - zlib1g-dev
        - libmemcached-dev

    - name: Symlink proper lib resources
      become: yes
      #command: sudo ln -s /usr/lib/x86_64-linux-gnu/libjpeg.so /usr/lib
      file:
        src='/usr/lib/x86_64-linux-gnu/libjpeg.so'
        dest='/usr/lib/libjpeg.so'
        state=link
      ignore_errors: yes

    - name: Symlink proper lib resources
      become: yes
      #command: sudo ln -s /usr/lib/x86_64-linux-gnu/libfreetype.so /usr/lib
      file:
        src='/usr/lib/x86_64-linux-gnu/libfreetype.so'
        dest='/usr/lib/libfreetype.so'
        state=link
      ignore_errors: yes

    - name: Symlink proper lib resources
      become: yes
      #command: sudo ln -s /usr/lib/x86_64-linux-gnu/libz.so /usr/lib
      file:
        src='/usr/lib/x86_64-linux-gnu/libz.so'
        dest='/usr/lib/libz.so'
        state=link
      ignore_errors: yes

    #- name: Change the permission of the folder For adding rquirements
    #  become: yes
    #  command: chmod -R 777 {{ DIRECTORY }}

    - name: Create the virtualenv
      become: yes
      shell: virtualenv env --no-site-packages
      args:
        chdir: "{{ DIRECTORY }}"
        creates: "{{ VIRTUALENV_DIRECTORY }}/bin/activate"
      #ignore_errors: yes

    - name: Change the permission of the folder For adding rquirements
      become: yes
      command: chmod -R 777 "{{ VIRTUALENV_DIRECTORY }}"


    - name: "Copy virtualenv wrapper file"
      template:
        src=pyvenv
        dest="{{ VIRTUALENV_DIRECTORY }}/bin/pyvenv"

    - name: give the executable permission
      become: yes
      command: chmod a+x "{{ VIRTUALENV_DIRECTORY }}/bin/pyvenv"

    - name: give the executable permission
      become: yes
      command: chmod 777 "{{ VIRTUALENV_DIRECTORY }}/bin/pyvenv"

################# After virtualenv ###############################
- hosts: all #testservers
  remote_user: root

  vars:

    DIRECTORY: "/home/amsaslink/AmsaslinkImageManagerServer"
    SETTINGS_MODULE_PATH: "AmsaslinkImageManagerServer.settings"
    SETTINGS_MODULE_DIR: "/home/amsaslink/AmsaslinkImageManagerServer"
    VIRTUALENV_DIRECTORY: "/home/amsaslink/AmsaslinkImageManagerServer/env"
    SSH_KEY_DIRECTORY: "/home/amsaslink/.ssh"
    APP_CONTAINER_DIRECTORY: "/home/amsaslink"

    #ansible_python_interpreter: "/home/amsaslink/AmsaslinkImageManagerServer/env/bin/pyvenv"

  tasks:

    #- name: Install the requirements
    #  shell: pip install -r requirements.txt
    #  args:
    #    chdir: "{{ DIRECTORY }}"
    #  ignore_errors: yes

    #- name: Install the requirements txt file
    #  pip:
    #    chdir={{ DIRECTORY }}
    #    virtualenv=env
    #    virtualenv_site_packages=no
    #    requirements=requirements.txt
    #    state=present
    #  ignore_errors: yes

    - name: set up user_service virtualenv
      shell: chdir={{ DIRECTORY }} if [ ! -d env ]; then virtualenv env; fi

    - name: set up user_service python requirements
      command: chdir={{ DIRECTORY }} env/bin/pip install -r requirements.txt

    - name: Migrate the django
      django_manage:
        command=migrate
        app_path="{{ DIRECTORY }}"
        settings="{{ SETTINGS_MODULE_PATH }}"
        pythonpath="{{ SETTINGS_MODULE_DIR }}"
        virtualenv="{{ VIRTUALENV_DIRECTORY }}"

    - name: Create the static directory where nginx points to
      become: yes
      shell: chdir={{ DIRECTORY }} if [ ! -d static ]; then mkdir static; fi

    - name: Collect static the django
      become: yes
      django_manage:
        command=collectstatic
        app_path="{{ DIRECTORY }}"
        settings="{{ SETTINGS_MODULE_PATH }}"
        pythonpath="{{ SETTINGS_MODULE_DIR }}"
        virtualenv="{{ VIRTUALENV_DIRECTORY }}"


    - name: give the executable permission on static folder
      become: yes
      command: chmod 755 "{{ DIRECTORY }}/static"

    #- name: Run the server
    #  django_manage:
    #    command="runserver"
    #    app_path="{{ DIRECTORY }}"
    #    settings="{{ SETTINGS_MODULE_PATH }}"
    #    pythonpath="{{ SETTINGS_MODULE_DIR }}"
    #    virtualenv="{{ VIRTUALENV_DIRECTORY }}"
    # Need to integrate the uwsgi and nginx for properly configuring the instance
########################################

- hosts: all #testservers
  remote_user: root
  vars:
    USER_EMAIL: amsaslink@gmail.com
    USER_NAME: "amsaslink"
    USER_PASSWORD: "zCYrES7LNrZhj4#Y"

    DIRECTORY: "/home/amsaslink/AmsaslinkImageManagerServer"
    VIRTUALENV_DIRECTORY: "/home/amsaslink/AmsaslinkImageManagerServer/env"
    APP_NAME: "AmsaslinkImageManagerServer"

    GUNICORN_SERVER_PORT: 8000
    GUNICORN_SERVER_HOST: "0.0.0.0"

    GUNICORN_SUPERVISOR_APP_NAME: "gunicorn_imageserver"
    GUNICORN_WSGI_MODULE: "{{ APP_NAME }}'.'setup"
    GUNICORN_SUPERVISOR_APP_LOCAL_CONFIG: "templates/gunicorn.imageserver.amsaslink.com.conf.j2"
    GUNICORN_SUPERVISOR_APP_CONFIG: "/etc/supervisor/conf.d/gunicorn.imageserver.amsaslink.com.conf"

    GUNICORN_APP_LOG_DIR: "/var/log/gunicorn"
    GUNICORN_APP_OUT_FILE: "{{ GUNICORN_APP_LOG_DIR }}/imageserver.amsaslink.com.out.log"
    GUNICORN_APP_ERR_FILE: "{{ GUNICORN_APP_LOG_DIR }}/imageserver.amsaslink.com.err.log"

    SUPERVISORD_CONF_LOCAL: "templates/supervisord.conf.j2"
    SUPERVISORD_CONF_REMOTE: "/etc/supervisor/supervisord.conf"

  tasks:
    #- name: Install gunicorn
    #  pip:
    #    chdir={{ DIRECTORY }}
    #    name=gunicorn
    #    state=present
    #    virtualenv=env
    #    virtualenv_site_packages=no
    #  ignore_errors: yes

    - name: set up user_service virtualenv
      shell: chdir={{ DIRECTORY }} if [ ! -d env ]; then virtualenv env; fi

    - name: set up user_service python gunicorn
      command: chdir={{ DIRECTORY }} env/bin/pip install gunicorn

    - name: Create the log directory and files
      become: yes
      file:
        path={{ GUNICORN_APP_LOG_DIR }}
        mode=0777
        state=directory
        recurse=yes

    - name: Install the supervisor from apt
      become: yes
      apt:
        name=supervisor
        state=present

    - name: transfer the supervisor conf file
      become: yes
      template:
        src={{ GUNICORN_SUPERVISOR_APP_LOCAL_CONFIG }}
        dest={{ GUNICORN_SUPERVISOR_APP_CONFIG }}

    - name: transfer the supervisor conf file
      become: yes
      template:
        src={{ SUPERVISORD_CONF_LOCAL }}
        dest={{ SUPERVISORD_CONF_REMOTE }}

    - name: Symlink supervisor conf with the global /etc directory
      become: yes
      file:
        src={{ SUPERVISORD_CONF_REMOTE }}
        dest="/etc/supervisord.conf"
        state=link
      ignore_errors: yes

    - name: Install and manage supervisord
      become: yes
      supervisorctl:
        name={{ GUNICORN_SUPERVISOR_APP_NAME }}
        state=restarted
        config={{ SUPERVISORD_CONF_REMOTE }}

- hosts: all #testservers
  remote_user: root

  vars:
    DIRECTORY: "/home/amsaslink/AmsaslinkImageManagerServer"
    APP_NAME: "AmsaslinkImageManagerServer"
    STATIC_DIRECTORY: "{{ DIRECTORY }}/static/"

    PROTOCOL: "http"
    PORT: 80
    HOST: "0.0.0.0"

    DOMAIN_NAME: "imagemanager.amsaslink.com"
    MAX_BODY_SIZE: "1024m"

    FORWARDED_PROTOCOL: "http"
    FORWARDED_HOST: "localhost"
    FORWARDED_PORT: "8000"

    VIRTUAL_HOST_NAME: "{{ DOMAIN_NAME }}"
    VIRTUAL_HOST_IP: "127.0.0.10"

    #ansible_python_interpreter: "{{ DIRECTORY }}/env/bin/pyvenv"

  tasks:
    - name: install the nginx
      become: yes
      apt: name=nginx state=present

    - name: transfer the file to config directory of nginx
      become: yes
      template:
        src="templates/imagemanager.amsaslink.com.j2"
        dest="/etc/nginx/sites-available/imagemanager.amsaslink.com"
        force=yes

    - name: Remove any symlinked file from previously enabled config
      become: yes
      file:
        src="/etc/nginx/sites-available/imagemanager.amsaslink.com"
        dest="/etc/nginx/sites-enabled/imagemanager.amsaslink.com"
        state=link
      ignore_errors: yes

    - name: Enable 80 PORT
      command: 'sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT'
      ignore_errors: yes

    - name: Enable 80 PORT
      command: 'sudo iptables -A INPUT -p tcp --dport 8000 -j ACCEPT'
      ignore_errors: yes

    - name: Edit the hosts file
      become: yes
      lineinfile:
        dest=/etc/hosts
        regexp="{{ VIRTUAL_HOST_IP }} {{ VIRTUAL_HOST_NAME }}"
        insertbefore="# The following lines are desirable for IPv6 capable hosts"
        line="{{ VIRTUAL_HOST_IP }} {{ VIRTUAL_HOST_NAME }}"
        owner=root
        group=root
        mode=0644
        state=present

    - name: Restart the nginx
      become: yes
      service:
        name=nginx
        state=reloaded
        enabled=yes
